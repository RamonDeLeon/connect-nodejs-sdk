const SquareConnect = require('../../src/index');
const {
  accounts,
  expect,
  handleUnexpectedError
} = require('../support/setup');

/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.20191217.0-SNAPSHOT
 *
 */

describe('LaborApi', function() {
  beforeEach(function() {
    const defaultClient = SquareConnect.ApiClient.instance;
    const oauth2 = defaultClient.authentications['oauth2'];
    // Some APIs do not work with sandbox. Replace `sandbox` with `production` for those test suites.
    oauth2.accessToken = accounts.sandbox.access_token;
    this.api  = new SquareConnect.LaborApi();
  });

  afterEach(function(){
  });

  describe('LaborApi', function() {
    describe('createBreakType', function() {
      it('should call createBreakType successfully', function(done) {
        //uncomment below and update the code to test createBreakType
        //instance.createBreakType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createShift', function() {
      it('should call createShift successfully', function(done) {
        //uncomment below and update the code to test createShift
        //instance.createShift(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBreakType', function() {
      it('should call deleteBreakType successfully', function(done) {
        //uncomment below and update the code to test deleteBreakType
        //instance.deleteBreakType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteShift', function() {
      it('should call deleteShift successfully', function(done) {
        //uncomment below and update the code to test deleteShift
        //instance.deleteShift(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBreakType', function() {
      it('should call getBreakType successfully', function(done) {
        //uncomment below and update the code to test getBreakType
        //instance.getBreakType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmployeeWage', function() {
      it('should call getEmployeeWage successfully', function(done) {
        //uncomment below and update the code to test getEmployeeWage
        //instance.getEmployeeWage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getShift', function() {
      it('should call getShift successfully', function(done) {
        //uncomment below and update the code to test getShift
        //instance.getShift(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBreakTypes', function() {
      it('should call listBreakTypes successfully', function(done) {
        //uncomment below and update the code to test listBreakTypes
        //instance.listBreakTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEmployeeWages', function() {
      it('should call listEmployeeWages successfully', function(done) {
        //uncomment below and update the code to test listEmployeeWages
        //instance.listEmployeeWages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorkweekConfigs', function() {
      it('should call listWorkweekConfigs successfully', function(done) {
        //uncomment below and update the code to test listWorkweekConfigs
        //instance.listWorkweekConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchShifts', function() {
      it('should call searchShifts successfully', function(done) {
        //uncomment below and update the code to test searchShifts
        //instance.searchShifts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBreakType', function() {
      it('should call updateBreakType successfully', function(done) {
        //uncomment below and update the code to test updateBreakType
        //instance.updateBreakType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateShift', function() {
      it('should call updateShift successfully', function(done) {
        //uncomment below and update the code to test updateShift
        //instance.updateShift(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkweekConfig', function() {
      it('should call updateWorkweekConfig successfully', function(done) {
        //uncomment below and update the code to test updateWorkweekConfig
        //instance.updateWorkweekConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });
});
