/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 */

const SquareConnect = require('../../src/index');
const {
  accounts,
  expect,
  assert,
  handleUnexpectedError,
  generateIdempotencyKey
} = require('../support/setup');

describe('V1TransactionsApi', function() {
  beforeEach(function() {
    const defaultClient = SquareConnect.ApiClient.instance;
    const oauth2 = defaultClient.authentications['oauth2'];
    // Some APIs do not work with sandbox. Replace `sandbox` with `production` for those test suites.
    oauth2.accessToken = accounts.sandbox.access_token;
    this.api  = new SquareConnect.V1TransactionsApi();
  });

  afterEach(function(){
  });

  describe('createRefund', function() {
    it('should call createRefund successfully', function(done) {
      //uncomment below and update the code to test createRefund
      //instance.createRefund(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
  describe('listBankAccounts', function() {
    it('should call listBankAccounts successfully', function(done) {
      //uncomment below and update the code to test listBankAccounts
      //instance.listBankAccounts(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
  describe('listOrders', function() {
    it('should call listOrders successfully', function(done) {
      //uncomment below and update the code to test listOrders
      //instance.listOrders(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
  describe('listPayments', function() {
    it('should call listPayments successfully', function(done) {
      //uncomment below and update the code to test listPayments
      //instance.listPayments(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
  describe('listRefunds', function() {
    it('should call listRefunds successfully', function(done) {
      //uncomment below and update the code to test listRefunds
      //instance.listRefunds(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
  describe('listSettlements', function() {
    it('should call listSettlements successfully', function(done) {
      //uncomment below and update the code to test listSettlements
      //instance.listSettlements(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
  describe('retrieveBankAccount', function() {
    it('should call retrieveBankAccount successfully', function(done) {
      //uncomment below and update the code to test retrieveBankAccount
      //instance.retrieveBankAccount(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
  describe('retrieveOrder', function() {
    it('should call retrieveOrder successfully', function(done) {
      //uncomment below and update the code to test retrieveOrder
      //instance.retrieveOrder(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
  describe('retrievePayment', function() {
    it('should call retrievePayment successfully', function(done) {
      //uncomment below and update the code to test retrievePayment
      //instance.retrievePayment(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
  describe('retrieveSettlement', function() {
    it('should call retrieveSettlement successfully', function(done) {
      //uncomment below and update the code to test retrieveSettlement
      //instance.retrieveSettlement(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
  describe('updateOrder', function() {
    it('should call updateOrder successfully', function(done) {
      //uncomment below and update the code to test updateOrder
      //instance.updateOrder(function(error) {
      //  if (error) throw error;
      //expect().to.be();
      //});
      done();
    });
  });
});

